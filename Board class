package Tetris_Game;

import Tetris_Game.Shape.Tetrominoe;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Board extends JPanel {

    
	private final int BOARD_WIDTH = 10;
    private final int BOARD_HEIGHT = 22;
    private final int PERIOD_INTERVAL = 300;

    private Timer timer;
    private boolean isFallingFinished = false;
    private boolean isPaused = false;
    private int numLinesRemoved = 0;
    private JLabel timerText;
    private int curX = 0;
    private int curY = 0;
    private JLabel statusbar;
    private Shape curPiece;
    private Tetrominoe[] board;
    private int score = 0;
    //private boolean powerUp = false; // whether the block should be normal or power up
    private int highScore = getHighScore();
    private int lives = 3;
    final long startTime = System.currentTimeMillis();
    private Long elapsedTime = (long) 1;
    private int speed = 60;
    private Queue<Shape> nextBlocksQueue = new LinkedList<>();

    public Board() {
    	
    }
    
    public Board(Tetris parent) {

        initBoard(parent);
        for (int i = 0; i < 3; i++) {
            nextBlocksQueue.add(generateRandomBlock());
        }
    }


	private void initBoard(Tetris parent) {

        setFocusable(true);
        statusbar = parent.getStatusBar();
        timerText = parent.getTimerText();
        addKeyListener(new TAdapter());
    }

    private int squareWidth() {

        return (int) getSize().getWidth() / BOARD_WIDTH;
    }

    private int squareHeight() {

        return (int) getSize().getHeight() / BOARD_HEIGHT;
    }

    private Tetrominoe shapeAt(int x, int y) {

        return board[(y * BOARD_WIDTH) + x];
    }

    void start() {

        curPiece = new Shape();
        board = new Tetrominoe[BOARD_WIDTH * BOARD_HEIGHT];

        clearBoard();
        newPiece();
        
        timer = new Timer(PERIOD_INTERVAL, new GameCycle());
        timer.start();
    }

    private void pause() {

        isPaused = !isPaused;

        if (isPaused) {

            statusbar.setText("paused");
        } else {

            statusbar.setText(" Lives: " + lives+1 );
        }

        repaint();
    }
    private void displayNextBlocks(Graphics g) {
        int x = BOARD_WIDTH + 2; // Display next blocks to the right of the board
        int y = 50;
        
        g.setFont(new Font("Cooper Black", Font.PLAIN, 16));
        g.setColor(Color.BLACK);
        g.drawString("Next:", x * squareWidth(), y);
        
        int blockDisplaySpacing = 5;
        int index = 0;
        for (Shape block : nextBlocksQueue) {
            for (int i = 0; i < 4; i++) {
                int blockX = x + block.x(i);
                int blockY = y + index * 50 + block.y(i);
                drawSquare(g, blockX * squareWidth(), blockY * squareHeight(), block.getShape());
            }
            index++;
        }
    }

    @Override
    public void paintComponent(Graphics g) {

        super.paintComponent(g);
        doDrawing(g);
        displayNextBlocks(g);
    }

    private void doDrawing(Graphics g) {

        var size = getSize();
        int boardTop = (int) size.getHeight() - BOARD_HEIGHT * squareHeight();
        

        for (int i = 0; i < BOARD_HEIGHT; i++) {

            for (int j = 0; j < BOARD_WIDTH; j++) {

                Tetrominoe shape = shapeAt(j, BOARD_HEIGHT - i - 1);

                if (shape != Tetrominoe.NoShape) {

                    drawSquare(g, j * squareWidth(),
                            boardTop + i * squareHeight(), shape);
                }
            }
        }

        if (curPiece.getShape() != Tetrominoe.NoShape) {
        	
            for (int i = 0; i < 4; i++) {

                	int x = curX + curPiece.x(i);
                	int y = curY - curPiece.y(i);

                	drawSquare(g, x * squareWidth(),
                        boardTop + (BOARD_HEIGHT - y - 1) * squareHeight(),
                        curPiece.getShape());
                
                }
            }
        // for score display
        g.setColor(Color.red);
        g.setFont(new Font("Cooper Black", Font.PLAIN, 20));
        FontMetrics metrics = getFontMetrics(g.getFont());
        g.drawString("Score :" + score,(BOARD_WIDTH - metrics.stringWidth("Score :" + score)/10), BOARD_HEIGHT);
        
    }

    private void dropDown() {

        int newY = curY;

        while (newY > 0) {

            if (!tryMove(curPiece, curX, newY - 1)) {

                break;
            }

            newY--;
        }

        pieceDropped();
    }

    private void oneLineDown() {

        if (!tryMove(curPiece, curX, curY - 1)) {

            pieceDropped();
        }
    }

    private void clearBoard() {

        for (int i = 0; i < BOARD_HEIGHT * BOARD_WIDTH; i++) {

            board[i] = Tetrominoe.NoShape;
        }
    }
    

    private void pieceDropped() {

        for (int i = 0; i < 4; i++) {

            int x = curX + curPiece.x(i);
            int y = curY - curPiece.y(i);
            board[(y * BOARD_WIDTH) + x] = curPiece.getShape();
        }

        removeFullLines();

        if (!isFallingFinished) {

            newPiece();
        }
    }

    private void newPiece() { // also checks if game over
    	
        curPiece.setRandomShape();
        curPiece = nextBlocksQueue.poll();
        nextBlocksQueue.add(generateRandomBlock());
        curX = BOARD_WIDTH / 2 + 1;
        curY = BOARD_HEIGHT - 1 + curPiece.minY();

        if (!tryMove(curPiece, curX, curY)) {
        	
        	if (lives != 0) {
                System.out.println("game still");
        		lives--;
                statusbar.setText("Lives: " +  String.valueOf(lives));
        		clearBoard();
        		/*int rows = 8;
        		for (int i = BOARD_HEIGHT - 1; i >= 0; i--) {
        			
                    boolean lineIsFull = true;
                    if (rows == 0) {
                    	
                    	break;
                    	
                        }
                    rows--;

                    if (lineIsFull) {

                        
                        for (int k = i; k < BOARD_HEIGHT - 1; k++) {
                            for (int j = 0; j < BOARD_WIDTH; j++) {
                                board[(k * BOARD_WIDTH) + j] = shapeAt(j, k + 1);
                            }
                        }
                      
                    }
                }

        		statusbar.setText(" Lives: " + lives);*/
        	}
        	if (lives == 0) {
                System.out.println("game end");
        		curPiece.setShape(Tetrominoe.NoShape);
        		timer.stop();

        		var msg = String.format("Game over. Score: %d", score);
        		statusbar.setText(msg);
        		if (score > highScore) { // if score is greater than highscore replace them
        			highScore = score;
        			scoreStorage();
        			setVisible(false);
        		}
        		else if (score <= highScore) {
        			gameOver gameOverScreen = new gameOver();
        	
        	}
        }
        }
    }

    private boolean tryMove(Shape newPiece, int newX, int newY) {

        for (int i = 0; i < 4; i++) {

            int x = newX + newPiece.x(i);
            int y = newY - newPiece.y(i);

            if (x < 0 || x >= BOARD_WIDTH || y < 0 || y >= BOARD_HEIGHT) {

                return false;
            }

            if (shapeAt(x, y) != Tetrominoe.NoShape) {

                return false;
            }
        }

        curPiece = newPiece;
        curX = newX;
        curY = newY;

        repaint();

        return true;
    }

    private void removeFullLines() {

    	// variables for power blocks
        int numFullLines = 0;
        int numGoldenBlock = 0;
        int numHeartBlock = 0;
        int numBombBlock = 0;
        boolean goldenBlock = false;
        boolean heartBlock = false;
        boolean bombBlock = false;
       

        for (int i = BOARD_HEIGHT - 1; i >= 0; i--) {

            boolean lineIsFull = true;

            for (int j = 0; j < BOARD_WIDTH; j++) {

                if (shapeAt(j, i) == Tetrominoe.NoShape) {

                    lineIsFull = false;
                    break;
                }
                if (shapeAt(j,i) == Tetrominoe.GoldenBlock) { // golden block feature
                	
                	goldenBlock = true;
                	numGoldenBlock++;
                }
                else if(shapeAt(j,i) == Tetrominoe.BombBlock) { // bomb block feature
                	
                	bombBlock = true;
                	numBombBlock++;
                }
                else if (shapeAt(j,i) == Tetrominoe.HeartBlock) { // heart block feature
                	
                	heartBlock = true;
                	numHeartBlock++;
                }
            }

            if (lineIsFull) {

                numFullLines++;
                
                // score will be updated here
                if(getScore() == 0) setScore(100);
                else if(getScore()!= 0)setScore(getScore() + 100);
                
                // golden blocks give more score
                if (goldenBlock == true)setScore(getScore() + 95*numGoldenBlock);
                
                for (int k = i; k < BOARD_HEIGHT - 1; k++) {
                    for (int j = 0; j < BOARD_WIDTH; j++) {
                        board[(k * BOARD_WIDTH) + j] = shapeAt(j, k + 1);
                    }
                }
                
                // bomb block destroys the nearest line
                if (bombBlock == true) {
                	while (numBombBlock != 0) {
                		for (int k = i; k < BOARD_HEIGHT - 1; k++) {
                            for (int j = 0; j < BOARD_WIDTH; j++) {
                                board[(k * BOARD_WIDTH) + j] = shapeAt(j, k + 1);
                            }
                        }
                		numBombBlock--;
                		setScore(getScore() + 100);
                	}
                }

                // heart block gain 1 live
                if (heartBlock == true) {
                	while (numHeartBlock !=0) {
                		lives++;
                		numHeartBlock--;
                		statusbar.setText(" Lives: " + lives);
                	}
                }
            }
        }

        if (numFullLines > 0) {

            numLinesRemoved += numFullLines;
            isFallingFinished = true;
            curPiece.setShape(Tetrominoe.NoShape);
        }
    }
    // store the highscore so it can be displayed
    private void scoreStorage() {
    	
    	try {
    		highScoreUpdate updatescore = new highScoreUpdate();
			BufferedWriter scoreWriter = new BufferedWriter(new FileWriter("scoreList.txt"));
			scoreWriter.append(String.valueOf(highScore) + ",");
			//System.out.println(name);
			scoreWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

    }
        
    private void drawSquare(Graphics g, int x, int y, Tetrominoe shape) {
    	
    	//Random rand = new Random();
    	//powerUp = rand.nextInt(10)==0;
    	
	        Color colors[] = {new Color(0, 0, 0), new Color(37, 7, 232), // added new color for power ups
	                new Color(102, 204, 102), new Color(102, 102, 204),
	                new Color(204, 204, 102), new Color(204, 102, 204),
	                new Color(102, 204, 204), new Color(218, 170, 0),
	                new Color(255, 0, 0), new Color(255, 221, 0),
	                new Color(10,10,10) 
	        };
	
	        var color = colors[shape.ordinal()];
	
	        g.setColor(color);
	        g.fillRect(x + 1, y + 1, squareWidth() - 2, squareHeight() - 2);
	
	        g.setColor(color.brighter());
	        g.drawLine(x, y + squareHeight() - 1, x, y);
	        g.drawLine(x, y, x + squareWidth() - 1, y);
	
	        g.setColor(color.darker());
	        g.drawLine(x + 1, y + squareHeight() - 1,
	                x + squareWidth() - 1, y + squareHeight() - 1);
	        g.drawLine(x + squareWidth() - 1, y + squareHeight() - 1,
	                x + squareWidth() - 1, y + 1);
    	}
 

    
    

    private class GameCycle implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            doGameCycle();
        }
    }

    private void doGameCycle() {
        elapsedTime = System.currentTimeMillis() - startTime;
            
        System.out.println("Elapsed time: " + (elapsedTime / 1000) + " seconds");
    //int a = (int) (elapsedTime / 1000);
        timerText.setText("Time: "+String.valueOf(elapsedTime / 1000));
        if ((elapsedTime / 1000) > speed) {
            adjustTimerSpeed(130);
        } 

        update();
        repaint();
    }

    private Shape generateRandomBlock() {
        Shape newBlock = new Shape(); // Create a new Shape object
        newBlock.setRandomShape();    // Set it to a random Tetromino shape
        return newBlock;              // Return the generated block
    }

    
// Method to adjust the timer speed dynamically
private void adjustTimerSpeed(int newInterval) {
    // Stop the current timer
    timer.stop();
    
    // Create a new timer with the updated interval (faster speed)
    timer = new Timer(newInterval, new GameCycle());
    
    // Start the new timer
    timer.start();
}

    

    private void update() {

        if (isPaused) {

            return;
        }

        if (isFallingFinished) {

            isFallingFinished = false;
            newPiece();
        } else {

            oneLineDown();
        }
    }

    public int getScore() {
		return score;
	}


	public void setScore(int score) {
		this.score = score;
	}
	
	public String toString() {
		return "" + getScore();
	}
	
	public int getHighScore() { // get the highscore from the scoreList file
		
		try {
			int scoreLine1 = 0;
			BufferedReader scoreFile = new BufferedReader (new FileReader("scoreList.txt"));
			String scoreLine = scoreFile.readLine();
			while(scoreLine == "0" || scoreLine == "1" || scoreLine == "2" || scoreLine == "3" || scoreLine == "4" || scoreLine == "5" || scoreLine == "6" || scoreLine == "7" || scoreLine == "8" || scoreLine == "9") {
				scoreLine1 = Integer.parseInt(scoreLine.trim());
				
			}
			return scoreLine1;
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 0;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 0;
		} catch (NumberFormatException e) {
			e.printStackTrace();
			return 0;
		}
		
		
	}

	class TAdapter extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {

            if (curPiece.getShape() == Tetrominoe.NoShape) {

                return;
            }

            int keycode = e.getKeyCode();

            // Java 12 switch expressions
            switch (keycode) {

                case KeyEvent.VK_P -> pause();
                case KeyEvent.VK_LEFT -> tryMove(curPiece, curX - 1, curY);
                case KeyEvent.VK_RIGHT -> tryMove(curPiece, curX + 1, curY);
                case KeyEvent.VK_DOWN -> tryMove(curPiece.rotateRight(), curX, curY);
                case KeyEvent.VK_UP -> tryMove(curPiece.rotateLeft(), curX, curY);
                case KeyEvent.VK_SPACE -> dropDown();
                case KeyEvent.VK_S -> oneLineDown();
            }
        }
    }

}
